diff --git a/linux-4.14.2/drivers/net/xen-netback/common.h b/linux-4.14.2/drivers/net/xen-netback/common.h
index 5b1d2e8..2bafeac 100755
--- a/linux-4.14.2/drivers/net/xen-netback/common.h
+++ b/linux-4.14.2/drivers/net/xen-netback/common.h
@@ -263,6 +263,11 @@ struct xenvif {
 	u8 ip_csum:1;
 	u8 ipv6_csum:1;
 	u8 multicast_control:1;
+	/**
+	 * [AUTHOR] : djobiii2078
+	 * i-flipping variable
+	 **/
+	u8 i_flipping:1;
 
 	/* Is this interface disabled? True when backend discovers
 	 * frontend is rogue.
@@ -381,6 +386,10 @@ extern unsigned int rx_drain_timeout_msecs;
 extern unsigned int rx_stall_timeout_msecs;
 extern unsigned int xenvif_max_queues;
 extern unsigned int xenvif_hash_cache_size;
+/** [AUTHOR] : djobiii2078
+ * Necessary variable to enable informed flipping (i-flipping)
+ **/
+extern unsigned int xenvif_i_flipping;
 
 #ifdef CONFIG_DEBUG_FS
 extern struct dentry *xen_netback_dbg_root;
diff --git a/linux-4.14.2/drivers/net/xen-netback/netback.c b/linux-4.14.2/drivers/net/xen-netback/netback.c
index 5042ff8..71c6c4b 100755
--- a/linux-4.14.2/drivers/net/xen-netback/netback.c
+++ b/linux-4.14.2/drivers/net/xen-netback/netback.c
@@ -96,6 +96,13 @@ unsigned int xenvif_hash_cache_size = XENVIF_HASH_CACHE_SIZE_DEFAULT;
 module_param_named(hash_cache_size, xenvif_hash_cache_size, uint, 0644);
 MODULE_PARM_DESC(hash_cache_size, "Number of flows in the hash cache");
 
+/** [AUTHOR]: djobiii2078
+ * Enable the module i-flipping initialisation
+ **/
+unsigned int  xenvif_i_flipping = XEN_NETIF_RX_RING_SIZE;
+module_param_named(i_flipping,xenvif_i_flipping,int,0644);
+MODULE_PARAM_DESC(i_flipping,"I-flipping Enabled feature");
+
 static void xenvif_idx_release(struct xenvif_queue *queue, u16 pending_idx,
 			       u8 status);
 
diff --git a/linux-4.14.2/drivers/net/xen-netback/xenbus.c b/linux-4.14.2/drivers/net/xen-netback/xenbus.c
index a56d3ea..0a24a75 100755
--- a/linux-4.14.2/drivers/net/xen-netback/xenbus.c
+++ b/linux-4.14.2/drivers/net/xen-netback/xenbus.c
@@ -419,6 +419,14 @@ static int netback_probe(struct xenbus_device *dev,
 		goto fail;
 	}
 
+	/** [AUTHOR] : djobiii2078 
+	 * Informed Flipping optional feature
+	 * in the netback_probe function
+	 **/
+	err = xenbus_printf(XBT_NIL,dev->nodename,"i-flipping","%d",xenvif_i_flipping > 0);
+	if(err)
+		pr_debug("Error writing i-flipping\n");
+
 	be->hotplug_script = script;
 
 
@@ -1149,6 +1157,19 @@ static int read_xenbus_vif_flags(struct backend_info *be)
 	struct xenbus_device *dev = be->dev;
 	unsigned int rx_copy;
 	int err;
+	
+
+	/**
+	 * [AUTHOR] : djobiii2078
+	 * Reading the i-flipping feature
+	 **/
+	 int val; 
+	 err = xenbus_scanf(XBT_NIL,dev->otherend,"i-flipping",&val);
+	 if(err < 0){
+		 xenbus_dev_fatal(dev,err,"reading %s/i-flipping",dev->otherend);
+		 return err;
+	 }
+	 vif->i_flipping = (xenvif_i_flipping && !!val);
 
 	err = xenbus_scanf(XBT_NIL, dev->otherend, "request-rx-copy", "%u",
 			   &rx_copy);
diff --git a/linux-4.14.2/drivers/net/xen-netfront.c b/linux-4.14.2/drivers/net/xen-netfront.c
index 8b8689c..d6e2252 100755
--- a/linux-4.14.2/drivers/net/xen-netfront.c
+++ b/linux-4.14.2/drivers/net/xen-netfront.c
@@ -93,6 +93,80 @@ struct netfront_stats {
 	struct u64_stats_sync	syncp;
 };
 
+/**
+ * [AUTHOR]: djobiii2078
+ * Structure for marked pages
+ **/
+#define FOR_FLIPPING 0
+#define I_FLIP_INCREMENT 1
+#define I_FLIP_DECREMENT 2
+#define IN_LIST 1
+#define NOT_IN_LIST 2
+
+/**
+ * [INFO]: Linked chain of my free pages
+ */
+struct linked_page{
+	page __page;
+	linked_page *next;
+}linked_page;
+
+/**
+ * [INFO]: I_flipping data_structure used throughtout the life cycle
+ */
+struct i_flip_data{
+	u64 	nb_free_pages; //Number of pages obtained from dom0
+	u64 	nb_alloc_made; //Number of allocations made aside from from i_flip (for stats)
+	u64		i_flip_used; //Number of pages allocated from i_flipp (for stats)
+	linked_page pages;
+}
+/**
+ * [INFO]: Interface for using the previous data structure
+ */
+struct i_flip_utils{
+	/**
+	 * [INFO]: update_nb_pages
+	 * Updates the number of free_pages 
+	 * FLAG = I_FLIP_INCREMENT | I_FLIP_DECREMENT
+	 * 	@I_FLIP_INCREMENT : increment the number of free_pages by one
+	 * 	@I_FLIP_DECREMENT : decrement the number of free_pages by one
+	 */
+	(void*) update_nb_pages(i_flip_data i_flip, int flag);
+	/**
+	 * [INFO]: update_alloc_made
+	 * Updates the number of allocation made on behalf of the i-flip model
+	 * FLAG = I_FLIP_INCREMENT | I_FLIP_DECREMENT
+	 * 	@I_FLIP_INCREMENT : increment the number of allocations made by one
+	 * 	@I_FLIP_DECREMENT : decrement the number of allocations by one
+	 */
+	(void*) update_alloc_made(i_flip_data i_flip, int flag)
+
+	/**
+	 * [INFO]: add_free_page
+	 * Add the free page passed in the list of free pages available
+	 */
+	(void*) add_free_page(i_flip_data i_flip, page page);
+	/**
+	 * [INFO]: give_out_page
+	 * Gives out the first element of the list of pages and automatically calls 
+	 * update_nb_pages for statistics 
+	 **/
+	page give_out_page(i_flip_data i_flip);
+	/**
+	 * [INFO]: print_stats
+	 * print outs the statistics concerning the i_flipping model
+	 **/
+	(void*) print_stats(i_flip_data i_flip); 
+	/**
+	 * [INFO]: is_avail
+	 * Informs us on whether or not there are free pages
+	 * Returns 
+	 * 	1 if positive
+	 *  0 if negative
+	 */
+	int is_avail(i_flip_data i_flip);
+}
+
 struct netfront_info;
 
 struct netfront_queue {
@@ -158,6 +232,12 @@ struct netfront_info {
 	struct netfront_stats __percpu *tx_stats;
 
 	atomic_t rx_gso_checksum_fixup;
+	/**
+	 * [AUTHOR]: djobiii2078
+	 * Enabling xenbus initialization for 
+	 * i-flipping (Informed Flipping)
+	 **/
+	unsigned int i_flipping:1; 
 };
 
 struct netfront_rx_info {
@@ -165,6 +245,63 @@ struct netfront_rx_info {
 	struct xen_netif_extra_info extras[XEN_NETIF_EXTRA_TYPE_MAX - 1];
 };
 
+(void*) update_nb_pages(i_flip_data i_flip, int flag)
+{
+	if(flag == I_FLIP_INCREMENT) i_flip->nb_free_pages++;
+	if(flag == I_FLIP_DECREMENT) i_flip->nb_free_pages--;
+	return ;
+}
+
+(void*) update_alloc_made(i_flip_data i_flip, int flag)
+{
+	if(flag == I_FLIP_INCREMENT) i_flip->nb_alloc_made++;
+	if(flag == I_FLIP_DECREMENT) i_flip->nb_alloc_made--;
+	return ;
+}
+
+(void*) add_free_page(i_flip_data i_flip, page page)
+{
+	page->flipped = FOR_FLIPPING;
+	linked_page new_elem = kmalloc(1*sizeof(linked_page),GFP_KERNEL);
+	new_elem.__page = page;
+	new_elem.next = NULL;
+	i_flip->pages.next = new_elem;
+	return ; 
+}
+
+page give_out_page(i_flip_data i_flip)
+{
+	page given_page = i_flip->pages.__page;
+	//Remove the page from the list
+	i_flip->pages = i_flip->pages.next;
+	//Update the number of free_pages
+	update_nb_pages(i_flip,I_FLIP_DECREMENT);
+	i_flip->i_flip_used++;
+	given_page.flipped = !FOR_FLIPPING;
+	return given_page;
+}
+
+(void*) print_stats(i_flip_data i_flip)
+{
+	pr_info("[I-flipping Info] \n 
+				%u free_pages \n
+				%u nb_alloc_made \n
+				%u nb_store_pages_used\n", 
+				i_flip.nb_free_pages, 
+				i_flip.nb_alloc_made, 
+				i_flip.i_flip_used);
+	return ; 
+}
+
+int is_avail(i_flip_data i_flip)
+{
+	( i_flip->nb_free_pages > 0 ) ? 1 : 0;
+}
+
+static i_flip_data i_flip;
+static i_flip_utils flip_manager;
+
+
 static void skb_entry_set_link(union skb_entry *list, unsigned short id)
 {
 	list->link = id;
@@ -263,7 +400,16 @@ static struct sk_buff *xennet_alloc_one_rx_buffer(struct netfront_queue *queue)
 	if (unlikely(!skb))
 		return NULL;
 
-	page = alloc_page(GFP_ATOMIC | __GFP_NOWARN);
+	/**
+	 * [AUTHOR]: djobiii2078
+	 * Allocating the page to be flipped 
+	 * @queue->info->i_flipping is set to true 
+	 */
+	if(!is_avail(i_flip))
+		page = alloc_page(GFP_ATOMIC | __GFP_NOWARN);
+	else 
+		page = flip_manager.give_out_page(i_flip);
+
 	if (!page) {
 		kfree_skb(skb);
 		return NULL;
@@ -1165,6 +1311,12 @@ static void xennet_release_rx_bufs(struct netfront_queue *queue)
 		gnttab_end_foreign_access(ref, 0,
 					  (unsigned long)page_address(page));
 		queue->grant_rx_ref[id] = GRANT_INVALID_REF;
+		
+		/**
+		 * [AUTHOR]: djobiii2078
+		 * Add the received page from the dom0
+		 **/
+		flip_manager.add_free_page(i_flip,page);
 
 		kfree_skb(skb);
 	}
@@ -1916,6 +2068,17 @@ static int talk_to_netback(struct xenbus_device *dev,
 		goto abort_transaction;
 	}
 
+	/**
+	 * [AUTHOR]: djobiii2078
+	 * Initialize the xenbus i-flipping feature
+	 **/
+
+	err = xenbus_write(xbt, dev->nodename, "i-flipping","1");
+	if(err){
+		message = "writing i-flipping feature";
+		goto abort_transaction;
+	}
+
 	err = xenbus_transaction_end(xbt, 0);
 	if (err) {
 		if (err == -EAGAIN)
@@ -1945,6 +2108,11 @@ static int xennet_connect(struct net_device *dev)
 	int err;
 	unsigned int j = 0;
 	struct netfront_queue *queue = NULL;
+	/**
+	 * [AUTHOR] : djobiii2078
+	 * Variable for i-flipping initalization
+	 **/
+	unsigned int i_flipping; 
 
 	if (!xenbus_read_unsigned(np->xbdev->otherend, "feature-rx-copy", 0)) {
 		dev_info(&dev->dev,
@@ -1952,6 +2120,24 @@ static int xennet_connect(struct net_device *dev)
 		return -ENODEV;
 	}
 
+	/**
+	 * [AUTHOR] : djobiii2078
+	 * Verifying if the backend supports the i-flipping feature
+	 **/
+	err = xenbus_gather(XBT_NIL, np->xbdev->otherend,"i-flipping","%u",&i_flipping,NULL);
+	if(err) 
+		i_flipping = 0;
+	np->i_flipping = !!i_flipping;
+
+	i_flip.nb_alloc_made = 0;
+	i_flip.nb_free_pages = 0;
+	i_flip.i_flip_used = 0;
+	linked_page elem = NULL;
+	elem.page = NULL;
+	elem.next = NULL;
+	i_flip.pages = elem; 
+	
+
 	err = talk_to_netback(np->xbdev, np);
 	if (err)
 		return err;
diff --git a/linux-4.14.2/include/linux/mm_types.h b/linux-4.14.2/include/linux/mm_types.h
index c85f11d..bf49cad 100755
--- a/linux-4.14.2/include/linux/mm_types.h
+++ b/linux-4.14.2/include/linux/mm_types.h
@@ -40,6 +40,13 @@ struct hmm;
  * and lru list pointers also.
  */
 struct page {
+	/**
+	 * [AUTHOR]: djobiii2078
+	 * Flipped attribute used to know
+	 * if this page is reserved or not 
+	 * for flipping
+	 */
+	unsigned int flipped;
 	/* First double word block */
 	unsigned long flags;		/* Atomic flags, some possibly
 					 * updated asynchronously */
diff --git a/linux-4.14.2/mm/mempolicy.c b/linux-4.14.2/mm/mempolicy.c
index a2af6d5..e76dd42 100755
--- a/linux-4.14.2/mm/mempolicy.c
+++ b/linux-4.14.2/mm/mempolicy.c
@@ -108,6 +108,7 @@
 #define MPOL_MF_DISCONTIG_OK (MPOL_MF_INTERNAL << 0)	/* Skip checks for continuous vmas */
 #define MPOL_MF_INVERT (MPOL_MF_INTERNAL << 1)		/* Invert check for nodemask */
 
+#define FOR_FLIPPING 0
 static struct kmem_cache *policy_cache;
 static struct kmem_cache *sn_cache;
 
@@ -2038,9 +2039,15 @@ struct page *alloc_pages_current(gfp_t gfp, unsigned order)
 		page = __alloc_pages_nodemask(gfp, order,
 				policy_node(gfp, pol, numa_node_id()),
 				policy_nodemask(gfp, pol));
-
-	return page;
+	/**
+	 * [AUTHOR]: djobiii2078
+	 * If the flipped attribute is turned on 
+	 * choose another page
+	 **/
+	return (page->flipped!=FOR_FLIPPING) ? page : alloc_pages_current(gfp,order);
+	
 }
+
 EXPORT_SYMBOL(alloc_pages_current);
 
 int vma_dup_policy(struct vm_area_struct *src, struct vm_area_struct *dst)
